(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{376:function(t,s,a){"use strict";a.r(s);var n=a(25),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#一、javascript的变量有哪些类型？"}},[t._v("一、JavaScript的变量有哪些类型？")])]),a("li",[a("a",{attrs:{href:"#二、基础类型和引用类型的区别？"}},[t._v("二、基础类型和引用类型的区别？")])]),a("li",[a("a",{attrs:{href:"#三、函数参数是对象时会发生什么问题？"}},[t._v("三、函数参数是对象时会发生什么问题？")])]),a("li",[a("a",{attrs:{href:"#四、typeof和instanceof判断变量类型的区别？"}},[t._v("四、typeof和instanceof判断变量类型的区别？")])]),a("li",[a("a",{attrs:{href:"#五、有没有更好的判断变量类型的方法？"}},[t._v("五、有没有更好的判断变量类型的方法？")])]),a("li",[a("a",{attrs:{href:"#六、类数组转为数组的方式有哪些？"}},[t._v("六、类数组转为数组的方式有哪些？")])]),a("li",[a("a",{attrs:{href:"#七、如何判断一个变量是否是数组？"}},[t._v("七、如何判断一个变量是否是数组？")])]),a("li",[a("a",{attrs:{href:"#八、字符串的test、match、search它们之间的区别？"}},[t._v("八、字符串的test、match、search它们之间的区别？")])]),a("li",[a("a",{attrs:{href:"#九、字符串的slice、substring、substr它们之间的区别"}},[t._v("九、字符串的slice、substring、substr它们之间的区别")])]),a("li",[a("a",{attrs:{href:"#十、number-123-和new-number-123-有什么区别？"}},[t._v("十、Number('123')和new Number('123')有什么区别？")])]),a("li",[a("a",{attrs:{href:"#十一、-和-的区别？"}},[t._v("十一、==和===的区别？")])]),a("li",[a("a",{attrs:{href:"#十二、是否-就完全靠谱？"}},[t._v("十二、是否===就完全靠谱？")])]),a("li",[a("a",{attrs:{href:"#十三、在类型转换中哪些值会被转为true？"}},[t._v("十三、在类型转换中哪些值会被转为true？")])]),a("li",[a("a",{attrs:{href:"#十四、什么是基本包装类型？"}},[t._v("十四、什么是基本包装类型？")])]),a("li",[a("a",{attrs:{href:"#十五、tostring-和valueof的区别？"}},[t._v("十五、toString()和valueOf的区别？")])]),a("li",[a("a",{attrs:{href:"#十六、谈谈对this的理解？"}},[t._v("十六、谈谈对this的理解？")])]),a("li",[a("a",{attrs:{href:"#十七、改变当前调用this的方式？"}},[t._v("十七、改变当前调用this的方式？")])]),a("li",[a("a",{attrs:{href:"#十八、谈谈对闭包的理解？"}},[t._v("十八、谈谈对闭包的理解？")])]),a("li",[a("a",{attrs:{href:"#十九、谈谈对原型以及原型链的理解？"}},[t._v("十九、谈谈对原型以及原型链的理解？")])]),a("li",[a("a",{attrs:{href:"#二十、原型继承的方式有哪些？"}},[t._v("二十、原型继承的方式有哪些？")])]),a("li",[a("a",{attrs:{href:"#二十一、什么是垃圾回收机制？"}},[t._v("二十一、什么是垃圾回收机制？")])]),a("li",[a("a",{attrs:{href:"#二十二、如何解决引用类型变量共享的问题？"}},[t._v("二十二、如何解决引用类型变量共享的问题？")])]),a("li",[a("a",{attrs:{href:"#二十三、函数防抖和节流的区别？"}},[t._v("二十三、函数防抖和节流的区别？")])]),a("li",[a("a",{attrs:{href:"#二十四、var、let、const的区别-？"}},[t._v("二十四、var、let、const的区别 ？")])]),a("li",[a("a",{attrs:{href:"#二十五、set、weakset的区别？"}},[t._v("二十五、Set、WeakSet的区别？")])]),a("li",[a("a",{attrs:{href:"#二十六、map、weakmap的区别？"}},[t._v("二十六、Map、WeakMap的区别？")])]),a("li",[a("a",{attrs:{href:"#二十七、箭头函数和普通函数的区别？"}},[t._v("二十七、箭头函数和普通函数的区别？")])]),a("li",[a("a",{attrs:{href:"#二十八、谈谈对-class-的理解-？"}},[t._v("二十八、谈谈对 class 的理解 ？")])]),a("li",[a("a",{attrs:{href:"#二十九、谈谈对promise的理解-？"}},[t._v("二十九、谈谈对Promise的理解 ？")])]),a("li",[a("a",{attrs:{href:"#三十、谈谈对es-module的理解？"}},[t._v("三十、谈谈对ES-Module的理解？")])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"一、javascript的变量有哪些类型？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、javascript的变量有哪些类型？"}},[t._v("#")]),t._v(" 一、JavaScript的变量有哪些类型？")]),t._v(" "),a("p",[t._v("分为两种：基础类型和引用类型。")]),t._v(" "),a("ul",[a("li",[t._v("基础类型（6种）："),a("code",[t._v("boolean")]),t._v("、"),a("code",[t._v("null")]),t._v("、"),a("code",[t._v("undefined")]),t._v("、"),a("code",[t._v("number")]),t._v("、"),a("code",[t._v("string")]),t._v("、"),a("code",[t._v("symbol")]),t._v("。")]),t._v(" "),a("li",[t._v("引用类型："),a("code",[t._v("Array")]),t._v("、"),a("code",[t._v("Object")]),t._v("、"),a("code",[t._v("Function")]),t._v("。"),a("code",[t._v("Array")]),t._v(" 与 "),a("code",[t._v("Function")]),t._v(" 都是基于 "),a("code",[t._v("Object")])])]),t._v(" "),a("h2",{attrs:{id:"二、基础类型和引用类型的区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、基础类型和引用类型的区别？"}},[t._v("#")]),t._v(" 二、基础类型和引用类型的区别？")]),t._v(" "),a("ul",[a("li",[t._v("它们在内存中存储的方式不同。基础类型存储的是值，而引用类型存储的是指向内存中某个空间的指针；")]),t._v(" "),a("li",[t._v("基础类型赋值就是把值赋给另外一个变量，而引用类型的赋值是赋值的原来变量的指针，所以当引用类型发生改变时，只要是指向同一个指针的变量的都会发生改变。")])]),t._v(" "),a("h2",{attrs:{id:"三、函数参数是对象时会发生什么问题？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、函数参数是对象时会发生什么问题？"}},[t._v("#")]),t._v(" 三、函数参数是对象时会发生什么问题？")]),t._v(" "),a("p",[t._v("函数参数是对象时，相当于是将对象的指针传递给了函数，如果在函数的内部改变了对象的值，外面对象的值也会发生改变，数组也是如此。")]),t._v(" "),a("h2",{attrs:{id:"四、typeof和instanceof判断变量类型的区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、typeof和instanceof判断变量类型的区别？"}},[t._v("#")]),t._v(" 四、typeof和instanceof判断变量类型的区别？")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("typeof")]),t._v(" 对于基础类型除了 "),a("code",[t._v("null")]),t._v(" 以外都可以显示正确的类型，"),a("code",[t._v("null")]),t._v("会显示 "),a("code",[t._v("object")]),t._v("， 对于数组和对象都会显示 "),a("code",[t._v("object")]),t._v(" ，对于函数会显示 "),a("code",[t._v("function")]),t._v(" 。")]),t._v(" "),a("li",[a("code",[t._v("instanceof")]),t._v(" 主要是用来判断引用类型，它的原理是根据原型链来查找。")])]),t._v(" "),a("h2",{attrs:{id:"五、有没有更好的判断变量类型的方法？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、有没有更好的判断变量类型的方法？"}},[t._v("#")]),t._v(" 五、有没有更好的判断变量类型的方法？")]),t._v(" "),a("p",[t._v("可以使用 "),a("code",[t._v("Object.prototype.toString.call(var)")]),t._v(" ，可以更加准确的判断某个变量的类型。")]),t._v(" "),a("h2",{attrs:{id:"六、类数组转为数组的方式有哪些？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、类数组转为数组的方式有哪些？"}},[t._v("#")]),t._v(" 六、类数组转为数组的方式有哪些？")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h2",{attrs:{id:"七、如何判断一个变量是否是数组？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、如何判断一个变量是否是数组？"}},[t._v("#")]),t._v(" 七、如何判断一个变量是否是数组？")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("arr "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[object Array]'")]),t._v("\narr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Array\n")])])]),a("h2",{attrs:{id:"八、字符串的test、match、search它们之间的区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八、字符串的test、match、search它们之间的区别？"}},[t._v("#")]),t._v(" 八、字符串的test、match、search它们之间的区别？")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `test`是检测字符串是否匹配某个正则，返回布尔值；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `match`是返回检测字符匹配正则的数组结果集合，没有返回`null`；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1AbC2d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/[a-z]/ig")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['A', 'b', 'C', 'd']")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `search`是返回正则匹配到的下标，没有返回`-1`。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1AbC2d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/[a-z]/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n")])])]),a("h2",{attrs:{id:"九、字符串的slice、substring、substr它们之间的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#九、字符串的slice、substring、substr它们之间的区别"}},[t._v("#")]),t._v(" 九、字符串的slice、substring、substr它们之间的区别")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `slice`是返回字符串开始至结束下标减去开始下标个数的新字符串，下标是负数为倒数；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcdefg'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// c  // 3 - 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcdefg'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ''  // 2 - 3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcdefg'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// f  // -1 - -2")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `substring`和`slice`正常截取字符串时相同，负数为0，且下标值小的为开始下标；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcdefg'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//c  // 3 - 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcdefg'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// c  // 3 - 2 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcdefg'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// abc  // 3 - 0")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `substr`返回开始下标开始加第二个参数(不能为负数)个数的新字符串。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcdefg'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cde")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcdefg'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// de")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcdefg'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ef")]),t._v("\n")])])]),a("h2",{attrs:{id:"十、number-123-和new-number-123-有什么区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十、number-123-和new-number-123-有什么区别？"}},[t._v("#")]),t._v(" 十、Number('123')和new Number('123')有什么区别？")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Number('123')")]),t._v(" 是一个转换函数，会尝试把参数转为整数类型；")]),t._v(" "),a("li",[t._v("而 "),a("code",[t._v("new Number('123')")]),t._v(" 则不同，这是一个构造函数，它的结果是实例化出来一个对象。\n同样的情况也适用 "),a("code",[t._v("String")]),t._v(" 和 "),a("code",[t._v("new String")]),t._v(" "),a("code",[t._v("new Boolean")]),t._v(" 和 "),a("code",[t._v("new Boolean")]),t._v(" 的情况。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// number")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// object")]),t._v("\n")])])]),a("h2",{attrs:{id:"十一、-和-的区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十一、-和-的区别？"}},[t._v("#")]),t._v(" 十一、==和===的区别？")]),t._v(" "),a("p",[a("code",[t._v("===")]),t._v(" 会判断两边变量的类型和值是否全部相等，"),a("code",[t._v("==")]),t._v(" 会存在变量类型转换的问题，所以并不推荐使用，只用一种情况会被使用，"),a("code",[t._v("var == null")]),t._v(" 是 "),a("code",[t._v("var === undefined || var === null")]),t._v(" 的简写，其余情况一律使用 "),a("code",[t._v("===")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"十二、是否-就完全靠谱？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十二、是否-就完全靠谱？"}},[t._v("#")]),t._v(" 十二、是否===就完全靠谱？")]),t._v(" "),a("p",[t._v("不一定的，例如 "),a("code",[t._v("0 === -0")]),t._v(" 就为 "),a("code",[t._v("true")]),t._v(" ，"),a("code",[t._v("NaN === NaN")]),t._v(" 为 "),a("code",[t._v("false")]),t._v(" ，判断两个变量是否完全相等可以使用 "),a("code",[t._v("ES6")]),t._v(" 新增的 "),a("code",[t._v("API")]),t._v(" ，"),a("code",[t._v("Object.is(0, -0)")]),t._v(" ，"),a("code",[t._v("Object.is(NaN, NaN)")]),t._v(" 就可以准确区分。")]),t._v(" "),a("h2",{attrs:{id:"十三、在类型转换中哪些值会被转为true？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十三、在类型转换中哪些值会被转为true？"}},[t._v("#")]),t._v(" 十三、在类型转换中哪些值会被转为true？")]),t._v(" "),a("p",[t._v("除了 "),a("code",[t._v("undefined")]),t._v(" 、 "),a("code",[t._v("null")]),t._v(" 、 "),a("code",[t._v("false")]),t._v(" 、 "),a("code",[t._v("NaN")]),t._v(" 、 "),a("code",[t._v("''")]),t._v(" 、 "),a("code",[t._v("0")]),t._v(" 、 "),a("code",[t._v("-0")]),t._v(" 以外的值都会被转为 "),a("code",[t._v("true")]),t._v(" ，包括所有引用类型，即使是空的。")]),t._v(" "),a("h2",{attrs:{id:"十四、什么是基本包装类型？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十四、什么是基本包装类型？"}},[t._v("#")]),t._v(" 十四、什么是基本包装类型？")]),t._v(" "),a("p",[t._v("基本类型并不是对象，是不应该有各自方法的，为什么能调用各自的那些方法，是因为在后台对基本类型进行了包装。例如字符串、整数、布尔值，首先会使用各自的构造函数创建对应的实例，这样调用这些方法时就可以正常使用，不过再方法调用结束后，就会将实例给销毁掉，从而又是基本类型。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ↓ 后台包装")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 包装")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以调用方法")]),t._v("\ns1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 销毁")]),t._v("\n")])])]),a("h2",{attrs:{id:"十五、tostring-和valueof的区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十五、tostring-和valueof的区别？"}},[t._v("#")]),t._v(" 十五、toString()和valueOf的区别？")]),t._v(" "),a("p",[a("code",[t._v("null")]),t._v(" 和 "),a("code",[t._v("undefined")]),t._v(" 没有以上两个方法。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("toString")]),t._v("：值类型时返回自身的字符串形式；当是引用类型时，无论是一维或多维数组，将他们拍平成一个字符串，里面的 "),a("code",[t._v("null")]),t._v(" 和 "),a("code",[t._v("undefined")]),t._v(" 转为空字符串 "),a("code",[t._v("''")]),t._v(" ，对象转为 "),a("code",[t._v("[object Object]")]),t._v(" ，函数的原样返回字符串形式。")]),t._v(" "),a("li",[a("code",[t._v("valueOf")]),t._v(" 无论是值类型还是引用类型，大部分情况下都是原样返回，当是 "),a("code",[t._v("Date")]),t._v(" 类型时，返回时间戳。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("在进行字符串强转的时候，"),a("code",[t._v("toString")]),t._v(" 会优先于 "),a("code",[t._v("valueOf")]),t._v(" ；在进行数值运算时，"),a("code",[t._v("valueOf")]),t._v(" 会优先于 "),a("code",[t._v("toString")]),t._v(" 。\n当执行 "),a("code",[t._v("toString")]),t._v(" 的变量是一个整数类型时，支持传参，表示需要转为多少进制的字符串。")])]),t._v(" "),a("h2",{attrs:{id:"十六、谈谈对this的理解？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十六、谈谈对this的理解？"}},[t._v("#")]),t._v(" 十六、谈谈对this的理解？")]),t._v(" "),a("p",[a("code",[t._v("this")]),t._v(" 表示为当前的函数调用方，在运行时才能决定。如谁调用了某个方法，谁就是这个方法执行时的 "),a("code",[t._v("this")]),t._v(" 。")]),t._v(" "),a("h2",{attrs:{id:"十七、改变当前调用this的方式？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十七、改变当前调用this的方式？"}},[t._v("#")]),t._v(" 十七、改变当前调用this的方式？")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("call")]),t._v(" ：会立即执行调用 "),a("code",[t._v("call")]),t._v(" 方法的函数，不过是以第一个参数为 "),a("code",[t._v("this")]),t._v(" 的情况下调用，方法内可以传递不等的参数，作为调用 "),a("code",[t._v("call")]),t._v(" 方法的参数。")]),t._v(" "),a("li",[a("code",[t._v("apply")]),t._v(" ：运行方式和 "),a("code",[t._v("call")]),t._v(" 是一致的，只是接受的参数不同，不能是不定参数，得是一个数组。")]),t._v(" "),a("li",[a("code",[t._v("bind")]),t._v(" ：会改变当前的 "),a("code",[t._v("this")]),t._v(" ，接受不定参数，不过不会马上执行调用 "),a("code",[t._v("bind")]),t._v(" 方法的函数，而是返回一个函数作为结果，执行后才是调用函数的结果。")])]),t._v(" "),a("h2",{attrs:{id:"十八、谈谈对闭包的理解？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十八、谈谈对闭包的理解？"}},[t._v("#")]),t._v(" 十八、谈谈对闭包的理解？")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("JavaScript")]),t._v(" 中，根据词法作用域的规则，内部函数总是可以访问其外部函数中声明的变量，当通过调用一个外部函数返回一个内部函数后，即使该外部函数已经执行结束了，但是内部函数引用外部函数的变量依然保存在内存中，我们就把这些变量的集合称为闭包。")]),t._v(" "),a("h2",{attrs:{id:"十九、谈谈对原型以及原型链的理解？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十九、谈谈对原型以及原型链的理解？"}},[t._v("#")]),t._v(" 十九、谈谈对原型以及原型链的理解？")]),t._v(" "),a("ul",[a("li",[t._v("每一个 "),a("code",[t._v("JavaScript")]),t._v(" 引用类型(数组/对象/函数)都有一个 "),a("code",[t._v("__proto__")]),t._v(" 属性，这个属性是一个对象格式，也就是原型属性。在原型属性里面有一个 "),a("code",[t._v("constructor")]),t._v(" 属性，这个属性是这个引用类型的构造函数，在 "),a("code",[t._v("constructor")]),t._v(" 里面又有一个 "),a("code",[t._v("prototype")]),t._v(" 的属性，这个属性又指回了引用类型的原型属性。")]),t._v(" "),a("li",[t._v("原型链就是通过对象的 "),a("code",[t._v("__proto__")]),t._v(" 属性层层连接起来形成的，而构造函数的 "),a("code",[t._v("prototype")]),t._v(" 是一个对象属性，再构造函数实例化时就会将这个属性赋值给实例化后对象的 "),a("code",[t._v("__proto__")]),t._v(" 属性，所以函数的继承也会相应的构造出对象的原型链。")])]),t._v(" "),a("h2",{attrs:{id:"二十、原型继承的方式有哪些？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二十、原型继承的方式有哪些？"}},[t._v("#")]),t._v(" 二十、原型继承的方式有哪些？")]),t._v(" "),a("p",[t._v("原型链继承、借用构造函数继承、组合继承、原型式继承、寄生组合继承等等。最优化的继承方式是寄生组合继承：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Parent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Child")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Parent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Child")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Parent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Child")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Child\n")])])]),a("h2",{attrs:{id:"二十一、什么是垃圾回收机制？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二十一、什么是垃圾回收机制？"}},[t._v("#")]),t._v(" 二十一、什么是垃圾回收机制？")]),t._v(" "),a("ul",[a("li",[t._v("在程序执行的过程中，解释器会为创建出来的变量分配内存来存储这些变量的实体，执行环境会负责管理代码执行过程中使用到的内存，而何时划出新的内存以及何时把占用的内存释放出来的这样一套内存自动管理机制就是垃圾回收机制。这种周期性的回收策略主要有两种。")]),t._v(" "),a("li",[a("strong",[t._v("标记清除")]),t._v("：当变量进入环境时，就将这个变量标记为'进入环境'，而当这个变量离开环境时，则将其标记为'离开环境'。垃圾收集器会给内存中的每个变量都做上标记，然后它会去掉环境中的变量以及被环境中变量引用的变量的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，最后垃圾收集器完成内存清除工作。")]),t._v(" "),a("li",[a("strong",[t._v("引用计数")]),t._v("：追踪记录每个值被引用的次数，当声明了一个变量并将一个引用类型赋给该变量时，这个变量的引用次数就是1。相反如果包含这个值引用的变量又取得了另外一个值，则这个值的引用次数减1。当为0时，这说明没有办法再访问这个值了，因此垃圾收集器下次运行时，就会释放该值占用的内存。")])]),t._v(" "),a("h2",{attrs:{id:"二十二、如何解决引用类型变量共享的问题？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二十二、如何解决引用类型变量共享的问题？"}},[t._v("#")]),t._v(" 二十二、如何解决引用类型变量共享的问题？")]),t._v(" "),a("p",[t._v("可以对引用类型进行深拷贝解决，最简单暴力的深拷贝是 "),a("code",[t._v("JSON.parse(JSON.stringify(obj))")]),t._v(" ，不过也会存在诸多问题，更加完善的深拷贝需要手写递归方法对不同参数分别处理。")]),t._v(" "),a("h2",{attrs:{id:"二十三、函数防抖和节流的区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二十三、函数防抖和节流的区别？"}},[t._v("#")]),t._v(" 二十三、函数防抖和节流的区别？")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("函数防抖指一定时间内没有再次触发函数，就执行该函数，否则重新计时；节流是规定某个时间内只能执行一次函数。")])]),t._v(" "),a("p",[t._v("以wow（魔兽世界）为例：")]),t._v(" "),a("ul",[a("li",[t._v("函数防抖：2.5s施法的寒冰箭，再读条的过程中，你身子抖动打断了施法，再次触发技能时麻烦您重新读条。")]),t._v(" "),a("li",[t._v("函数节流：火冲为瞬发技能，不过你规定cd为8s，所以即使8s内按了10次，也只能来1发，节省点体力吧。")])]),t._v(" "),a("h2",{attrs:{id:"二十四、var、let、const的区别-？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二十四、var、let、const的区别-？"}},[t._v("#")]),t._v(" 二十四、var、let、const的区别 ？")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("var")]),t._v(" 类型会有变量提升的情况，也就是说声明会首先提升到当前作用域的顶端，在使用到时再读取定义的值。")]),t._v(" "),a("li",[t._v("在全局作用域下定义的 "),a("code",[t._v("var")]),t._v(" 变量会挂载到作用域链的顶端 "),a("code",[t._v("window")]),t._v(" 下，而 "),a("code",[t._v("let")]),t._v(" 和 "),a("code",[t._v("const")]),t._v(" 全局定义时在作用域链中要低一级。")]),t._v(" "),a("li",[a("code",[t._v("let")]),t._v(" 和 "),a("code",[t._v("const")]),t._v(" 没有变量提升的情况，必须要先声明再使用，否则就会出现暂时性死区的情况。")]),t._v(" "),a("li",[t._v("而且它们的作用域存在最近的大括号之内，也就是块级作用域，并且一经定义后，同一个作用域内不能再次定义。")]),t._v(" "),a("li",[t._v("而 "),a("code",[t._v("const")]),t._v(" 和 "),a("code",[t._v("let")]),t._v(" 的区别在于一经定义后不得再次改变 "),a("code",[t._v("const")]),t._v(" 定义的值，如果是引用类型只要不改变指针，改变里面的值是没问题的。")]),t._v(" "),a("li",[a("code",[t._v("const")]),t._v(" 定义时必须赋值，"),a("code",[t._v("let")]),t._v(" 不必。")])]),t._v(" "),a("h2",{attrs:{id:"二十五、set、weakset的区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二十五、set、weakset的区别？"}},[t._v("#")]),t._v(" 二十五、Set、WeakSet的区别？")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Set")]),t._v(" 类型内存储的是不会重复的值，建议存储基础类型的值，因为引用类型的指针都不同。")]),t._v(" "),a("li",[a("code",[t._v("WeakSet")]),t._v(" 只能存储对象参数，否则会报错，而且是存储的引用类型的弱引用。")]),t._v(" "),a("li",[a("code",[t._v("WeakSet")]),t._v(" 不可被迭代，不支持 "),a("code",[t._v("forEach")]),t._v(" 、 "),a("code",[t._v("for-of")]),t._v(" 、"),a("code",[t._v("keys")]),t._v(" 、"),a("code",[t._v("values")]),t._v(" 方法，没有 "),a("code",[t._v("size")]),t._v(" 属性。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {name: 'cc'} 转数组后依然可以访问到")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" weakSet "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nweakSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 会移除引用")]),t._v("\nweakSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("has")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),a("h2",{attrs:{id:"二十六、map、weakmap的区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二十六、map、weakmap的区别？"}},[t._v("#")]),t._v(" 二十六、Map、WeakMap的区别？")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Map")]),t._v(" 是解决了对象 "),a("code",[t._v("key")]),t._v(" 会被自动转为字符串的一种增强 "),a("code",[t._v("key/value")]),t._v(" 集合。")]),t._v(" "),a("li",[a("code",[t._v("WeakMap")]),t._v(" 是弱引用的 "),a("code",[t._v("Map")]),t._v(" 集合，"),a("code",[t._v("key")]),t._v(" 必须是非 "),a("code",[t._v("null")]),t._v(" 的对象格式，同样不可以被迭代。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cc")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("has")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false   1 和 '1'不会被转换")]),t._v("\n")])])]),a("h2",{attrs:{id:"二十七、箭头函数和普通函数的区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二十七、箭头函数和普通函数的区别？"}},[t._v("#")]),t._v(" 二十七、箭头函数和普通函数的区别？")]),t._v(" "),a("ul",[a("li",[t._v("箭头函数的 "),a("code",[t._v("this")]),t._v(" 是由包裹它的普通函数的 "),a("code",[t._v("this")]),t._v(" 来决定；")]),t._v(" "),a("li",[t._v("不能作为构造函数,  "),a("code",[t._v("Generator")]),t._v(" 函数；")]),t._v(" "),a("li",[t._v("参数不能使用 "),a("code",[t._v("arguments")]),t._v(" 访问，需要使用 "),a("code",[t._v("Es6")]),t._v(" 的不定参数访问；")]),t._v(" "),a("li",[t._v("使用 "),a("code",[t._v("bind")]),t._v(" 方法无效。")])]),t._v(" "),a("h2",{attrs:{id:"二十八、谈谈对-class-的理解-？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二十八、谈谈对-class-的理解-？"}},[t._v("#")]),t._v(" 二十八、谈谈对 "),a("code",[t._v("class")]),t._v(" 的理解 ？")]),t._v(" "),a("p",[a("code",[t._v("JavaScript")]),t._v(" 没有真正的类，一直也是通过函数加原型的形式来模拟，"),a("code",[t._v("class")]),t._v(" 也不例外，只是语法糖，本质还是函数。需要先声明再使用，内部的方法不会被遍历，且没有函数的 "),a("code",[t._v("prototype")]),t._v(" 属性。不过相较 "),a("code",[t._v("ES6")]),t._v(" 之前无论是定义还是继承都好理解了很多。继承主要是使用 "),a("code",[t._v("extends")]),t._v(" 和 "),a("code",[t._v("super")]),t._v(" 关键字，本质类似于 "),a("code",[t._v("ES5")]),t._v(" 的寄生组合继承：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Parent")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Child")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Parent")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 相当于Parent.call(this, name)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"二十九、谈谈对promise的理解-？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二十九、谈谈对promise的理解-？"}},[t._v("#")]),t._v(" 二十九、谈谈对Promise的理解 ？")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Promise")]),t._v(" 主要解决的问题就是异步回调嵌套过深造成代码难以维护和理解。")]),t._v(" "),a("li",[a("code",[t._v("Promise")]),t._v(" 构造函数内的代码是同步执行的，而之后 "),a("code",[t._v("then")]),t._v(" 或 "),a("code",[t._v("catch")]),t._v(" 方法是异步执行的，构造函数接受两个函数参数 "),a("code",[t._v("resolve")]),t._v(" 和 "),a("code",[t._v("reject")]),t._v("，它们执行时接受的参数分别会传递给 "),a("code",[t._v("then")]),t._v(" 和 "),a("code",[t._v("catch")]),t._v(" 表示成功的回调以及失败回调接受到的值。")]),t._v(" "),a("li",[a("code",[t._v("Promise")]),t._v(" 一共有三种状态 "),a("code",[t._v("pending")]),t._v(" 等待状态、"),a("code",[t._v("resolved")]),t._v(" 已完成状态、"),a("code",[t._v("rejected")]),t._v(" 已拒绝状态，状态的改变只能由等待转为已完成或等待转为已拒绝状态，而且状态的改变只会发生一次。")]),t._v(" "),a("li",[t._v("必须要实现 "),a("code",[t._v("then")]),t._v(" 方法且方法里必须要返回一个 "),a("code",[t._v("Promise")]),t._v(" 对象，如果是返回其他的类型会尝试包装成 "),a("code",[t._v("Promise")]),t._v(" 对象；")]),t._v(" "),a("li",[a("code",[t._v("then")]),t._v(" 可以被链式的调用。")]),t._v(" "),a("li",[t._v("缺点是 "),a("code",[t._v("Promise")]),t._v(" 链中途无法取消；"),a("strong",[t._v("错误需要通过回调函数捕获")]),t._v("。")])]),t._v(" "),a("h2",{attrs:{id:"三十、谈谈对es-module的理解？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三十、谈谈对es-module的理解？"}},[t._v("#")]),t._v(" 三十、谈谈对ES-Module的理解？")]),t._v(" "),a("p",[a("code",[t._v("ES-Module")]),t._v(" 是 "),a("code",[t._v("ES6")]),t._v(" 原生支持模块化方案，通过 "),a("code",[t._v("import")]),t._v(" 来引入模块，通过 "),a("code",[t._v("export default")]),t._v(" 或 "),a("code",[t._v("export")]),t._v(" 来导出模块。")])])}),[],!1,null,null,null);s.default=e.exports}}]);